
Task_2_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000788  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000788  000007fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000080a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000083c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000150  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001404  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000996  00000000  00000000  00001dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a17  00000000  00000000  00002762  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  0000317c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006d2  00000000  00000000  0000341c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cc5  00000000  00000000  00003aee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  000047b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 8a 02 	jmp	0x514	; 0x514 <__vector_16>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <main>
  7a:	0c 94 c2 03 	jmp	0x784	; 0x784 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <CLCD_voidSendFallingEdge>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	41 e0       	ldi	r20, 0x01	; 1
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	86 e6       	ldi	r24, 0x66	; 102
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 94 02 	call	0x528	; 0x528 <DIO_PIN_write>
  8e:	8f ec       	ldi	r24, 0xCF	; 207
  90:	97 e0       	ldi	r25, 0x07	; 7
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <CLCD_voidSendFallingEdge+0x10>
  96:	00 c0       	rjmp	.+0      	; 0x98 <CLCD_voidSendFallingEdge+0x16>
  98:	00 00       	nop
  9a:	40 e0       	ldi	r20, 0x00	; 0
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	86 e6       	ldi	r24, 0x66	; 102
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 94 02 	call	0x528	; 0x528 <DIO_PIN_write>
  a6:	8f ec       	ldi	r24, 0xCF	; 207
  a8:	97 e0       	ldi	r25, 0x07	; 7
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <CLCD_voidSendFallingEdge+0x28>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <CLCD_voidSendFallingEdge+0x2e>
  b0:	00 00       	nop
  b2:	08 95       	ret

000000b4 <CLCD_voidSendData>:
  b4:	68 2f       	mov	r22, r24
  b6:	80 e6       	ldi	r24, 0x60	; 96
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 b9 02 	call	0x572	; 0x572 <DIO_PORT_write>
  be:	41 e0       	ldi	r20, 0x01	; 1
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	86 e6       	ldi	r24, 0x66	; 102
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 94 02 	call	0x528	; 0x528 <DIO_PIN_write>
  ca:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendFallingEdge>
  ce:	8f ec       	ldi	r24, 0xCF	; 207
  d0:	97 e0       	ldi	r25, 0x07	; 7
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <CLCD_voidSendData+0x1e>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <CLCD_voidSendData+0x24>
  d8:	00 00       	nop
  da:	08 95       	ret

000000dc <CLCD_voidSendCommand>:
  dc:	68 2f       	mov	r22, r24
  de:	80 e6       	ldi	r24, 0x60	; 96
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 b9 02 	call	0x572	; 0x572 <DIO_PORT_write>
  e6:	40 e0       	ldi	r20, 0x00	; 0
  e8:	60 e0       	ldi	r22, 0x00	; 0
  ea:	86 e6       	ldi	r24, 0x66	; 102
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 94 02 	call	0x528	; 0x528 <DIO_PIN_write>
  f2:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendFallingEdge>
  f6:	8f ec       	ldi	r24, 0xCF	; 207
  f8:	97 e0       	ldi	r25, 0x07	; 7
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <CLCD_voidSendCommand+0x1e>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <CLCD_voidSendCommand+0x24>
 100:	00 00       	nop
 102:	08 95       	ret

00000104 <CLCD_voidSendString>:
 104:	0f 93       	push	r16
 106:	1f 93       	push	r17
 108:	cf 93       	push	r28
 10a:	8c 01       	movw	r16, r24
 10c:	c0 e0       	ldi	r28, 0x00	; 0
 10e:	03 c0       	rjmp	.+6      	; 0x116 <CLCD_voidSendString+0x12>
 110:	0e 94 5a 00 	call	0xb4	; 0xb4 <CLCD_voidSendData>
 114:	cf 5f       	subi	r28, 0xFF	; 255
 116:	f8 01       	movw	r30, r16
 118:	ec 0f       	add	r30, r28
 11a:	f1 1d       	adc	r31, r1
 11c:	80 81       	ld	r24, Z
 11e:	81 11       	cpse	r24, r1
 120:	f7 cf       	rjmp	.-18     	; 0x110 <CLCD_voidSendString+0xc>
 122:	cf 91       	pop	r28
 124:	1f 91       	pop	r17
 126:	0f 91       	pop	r16
 128:	08 95       	ret

0000012a <CLCD_voidSendNumber>:
 12a:	2f 92       	push	r2
 12c:	3f 92       	push	r3
 12e:	4f 92       	push	r4
 130:	5f 92       	push	r5
 132:	6f 92       	push	r6
 134:	7f 92       	push	r7
 136:	8f 92       	push	r8
 138:	9f 92       	push	r9
 13a:	af 92       	push	r10
 13c:	bf 92       	push	r11
 13e:	cf 92       	push	r12
 140:	df 92       	push	r13
 142:	ef 92       	push	r14
 144:	ff 92       	push	r15
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
 152:	28 97       	sbiw	r28, 0x08	; 8
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	f8 94       	cli
 158:	de bf       	out	0x3e, r29	; 62
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	cd bf       	out	0x3d, r28	; 61
 15e:	29 83       	std	Y+1, r18	; 0x01
 160:	3a 83       	std	Y+2, r19	; 0x02
 162:	4b 83       	std	Y+3, r20	; 0x03
 164:	5c 83       	std	Y+4, r21	; 0x04
 166:	6d 83       	std	Y+5, r22	; 0x05
 168:	7e 83       	std	Y+6, r23	; 0x06
 16a:	38 2e       	mov	r3, r24
 16c:	29 2e       	mov	r2, r25
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	0e 94 a7 03 	call	0x74e	; 0x74e <__cmpdi2_s8>
 174:	09 f0       	breq	.+2      	; 0x178 <CLCD_voidSendNumber+0x4e>
 176:	81 c0       	rjmp	.+258    	; 0x27a <CLCD_voidSendNumber+0x150>
 178:	80 e3       	ldi	r24, 0x30	; 48
 17a:	0e 94 5a 00 	call	0xb4	; 0xb4 <CLCD_voidSendData>
 17e:	cb c0       	rjmp	.+406    	; 0x316 <CLCD_voidSendNumber+0x1ec>
 180:	2f 81       	ldd	r18, Y+7	; 0x07
 182:	38 85       	ldd	r19, Y+8	; 0x08
 184:	49 2d       	mov	r20, r9
 186:	58 2d       	mov	r21, r8
 188:	67 2d       	mov	r22, r7
 18a:	76 2d       	mov	r23, r6
 18c:	85 2d       	mov	r24, r5
 18e:	94 2d       	mov	r25, r4
 190:	01 e0       	ldi	r16, 0x01	; 1
 192:	0e 94 85 03 	call	0x70a	; 0x70a <__ashldi3>
 196:	82 2e       	mov	r8, r18
 198:	93 2e       	mov	r9, r19
 19a:	48 87       	std	Y+8, r20	; 0x08
 19c:	5f 83       	std	Y+7, r21	; 0x07
 19e:	b6 2f       	mov	r27, r22
 1a0:	a7 2f       	mov	r26, r23
 1a2:	f8 2f       	mov	r31, r24
 1a4:	e9 2f       	mov	r30, r25
 1a6:	02 e0       	ldi	r16, 0x02	; 2
 1a8:	0e 94 85 03 	call	0x70a	; 0x70a <__ashldi3>
 1ac:	a2 2e       	mov	r10, r18
 1ae:	b3 2e       	mov	r11, r19
 1b0:	c4 2e       	mov	r12, r20
 1b2:	d5 2e       	mov	r13, r21
 1b4:	e6 2e       	mov	r14, r22
 1b6:	f7 2e       	mov	r15, r23
 1b8:	08 2f       	mov	r16, r24
 1ba:	19 2f       	mov	r17, r25
 1bc:	28 2d       	mov	r18, r8
 1be:	39 2d       	mov	r19, r9
 1c0:	48 85       	ldd	r20, Y+8	; 0x08
 1c2:	5f 81       	ldd	r21, Y+7	; 0x07
 1c4:	6b 2f       	mov	r22, r27
 1c6:	7a 2f       	mov	r23, r26
 1c8:	8f 2f       	mov	r24, r31
 1ca:	9e 2f       	mov	r25, r30
 1cc:	0e 94 9e 03 	call	0x73c	; 0x73c <__adddi3>
 1d0:	28 87       	std	Y+8, r18	; 0x08
 1d2:	3f 83       	std	Y+7, r19	; 0x07
 1d4:	94 2e       	mov	r9, r20
 1d6:	85 2e       	mov	r8, r21
 1d8:	76 2e       	mov	r7, r22
 1da:	67 2e       	mov	r6, r23
 1dc:	58 2e       	mov	r5, r24
 1de:	49 2e       	mov	r4, r25
 1e0:	0f 2e       	mov	r0, r31
 1e2:	fa e0       	ldi	r31, 0x0A	; 10
 1e4:	af 2e       	mov	r10, r31
 1e6:	f0 2d       	mov	r31, r0
 1e8:	b1 2c       	mov	r11, r1
 1ea:	c1 2c       	mov	r12, r1
 1ec:	d1 2c       	mov	r13, r1
 1ee:	e1 2c       	mov	r14, r1
 1f0:	f1 2c       	mov	r15, r1
 1f2:	00 e0       	ldi	r16, 0x00	; 0
 1f4:	10 e0       	ldi	r17, 0x00	; 0
 1f6:	29 81       	ldd	r18, Y+1	; 0x01
 1f8:	3a 81       	ldd	r19, Y+2	; 0x02
 1fa:	4b 81       	ldd	r20, Y+3	; 0x03
 1fc:	5c 81       	ldd	r21, Y+4	; 0x04
 1fe:	6d 81       	ldd	r22, Y+5	; 0x05
 200:	7e 81       	ldd	r23, Y+6	; 0x06
 202:	83 2d       	mov	r24, r3
 204:	92 2d       	mov	r25, r2
 206:	0e 94 26 03 	call	0x64c	; 0x64c <__umoddi3>
 20a:	a2 2e       	mov	r10, r18
 20c:	b3 2e       	mov	r11, r19
 20e:	c4 2e       	mov	r12, r20
 210:	d5 2e       	mov	r13, r21
 212:	e6 2e       	mov	r14, r22
 214:	f7 2e       	mov	r15, r23
 216:	08 2f       	mov	r16, r24
 218:	19 2f       	mov	r17, r25
 21a:	28 85       	ldd	r18, Y+8	; 0x08
 21c:	3f 81       	ldd	r19, Y+7	; 0x07
 21e:	49 2d       	mov	r20, r9
 220:	58 2d       	mov	r21, r8
 222:	67 2d       	mov	r22, r7
 224:	76 2d       	mov	r23, r6
 226:	85 2d       	mov	r24, r5
 228:	94 2d       	mov	r25, r4
 22a:	0e 94 9e 03 	call	0x73c	; 0x73c <__adddi3>
 22e:	2f 83       	std	Y+7, r18	; 0x07
 230:	38 87       	std	Y+8, r19	; 0x08
 232:	94 2e       	mov	r9, r20
 234:	85 2e       	mov	r8, r21
 236:	76 2e       	mov	r7, r22
 238:	67 2e       	mov	r6, r23
 23a:	58 2e       	mov	r5, r24
 23c:	49 2e       	mov	r4, r25
 23e:	0f 2e       	mov	r0, r31
 240:	fa e0       	ldi	r31, 0x0A	; 10
 242:	af 2e       	mov	r10, r31
 244:	f0 2d       	mov	r31, r0
 246:	b1 2c       	mov	r11, r1
 248:	c1 2c       	mov	r12, r1
 24a:	d1 2c       	mov	r13, r1
 24c:	e1 2c       	mov	r14, r1
 24e:	f1 2c       	mov	r15, r1
 250:	00 e0       	ldi	r16, 0x00	; 0
 252:	10 e0       	ldi	r17, 0x00	; 0
 254:	29 81       	ldd	r18, Y+1	; 0x01
 256:	3a 81       	ldd	r19, Y+2	; 0x02
 258:	4b 81       	ldd	r20, Y+3	; 0x03
 25a:	5c 81       	ldd	r21, Y+4	; 0x04
 25c:	6d 81       	ldd	r22, Y+5	; 0x05
 25e:	7e 81       	ldd	r23, Y+6	; 0x06
 260:	83 2d       	mov	r24, r3
 262:	92 2d       	mov	r25, r2
 264:	0e 94 28 03 	call	0x650	; 0x650 <__udivdi3>
 268:	29 83       	std	Y+1, r18	; 0x01
 26a:	3a 83       	std	Y+2, r19	; 0x02
 26c:	4b 83       	std	Y+3, r20	; 0x03
 26e:	5c 83       	std	Y+4, r21	; 0x04
 270:	6d 83       	std	Y+5, r22	; 0x05
 272:	7e 83       	std	Y+6, r23	; 0x06
 274:	38 2e       	mov	r3, r24
 276:	29 2e       	mov	r2, r25
 278:	09 c0       	rjmp	.+18     	; 0x28c <CLCD_voidSendNumber+0x162>
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	18 86       	std	Y+8, r1	; 0x08
 27e:	91 2c       	mov	r9, r1
 280:	81 2c       	mov	r8, r1
 282:	71 2c       	mov	r7, r1
 284:	61 2c       	mov	r6, r1
 286:	51 2c       	mov	r5, r1
 288:	41 2c       	mov	r4, r1
 28a:	8f 83       	std	Y+7, r24	; 0x07
 28c:	29 81       	ldd	r18, Y+1	; 0x01
 28e:	3a 81       	ldd	r19, Y+2	; 0x02
 290:	4b 81       	ldd	r20, Y+3	; 0x03
 292:	5c 81       	ldd	r21, Y+4	; 0x04
 294:	6d 81       	ldd	r22, Y+5	; 0x05
 296:	7e 81       	ldd	r23, Y+6	; 0x06
 298:	83 2d       	mov	r24, r3
 29a:	92 2d       	mov	r25, r2
 29c:	a0 e0       	ldi	r26, 0x00	; 0
 29e:	0e 94 a7 03 	call	0x74e	; 0x74e <__cmpdi2_s8>
 2a2:	09 f0       	breq	.+2      	; 0x2a6 <CLCD_voidSendNumber+0x17c>
 2a4:	6d cf       	rjmp	.-294    	; 0x180 <CLCD_voidSendNumber+0x56>
 2a6:	2b c0       	rjmp	.+86     	; 0x2fe <CLCD_voidSendNumber+0x1d4>
 2a8:	0f 2e       	mov	r0, r31
 2aa:	fa e0       	ldi	r31, 0x0A	; 10
 2ac:	af 2e       	mov	r10, r31
 2ae:	f0 2d       	mov	r31, r0
 2b0:	b1 2c       	mov	r11, r1
 2b2:	c1 2c       	mov	r12, r1
 2b4:	d1 2c       	mov	r13, r1
 2b6:	e1 2c       	mov	r14, r1
 2b8:	f1 2c       	mov	r15, r1
 2ba:	00 e0       	ldi	r16, 0x00	; 0
 2bc:	10 e0       	ldi	r17, 0x00	; 0
 2be:	2f 81       	ldd	r18, Y+7	; 0x07
 2c0:	38 85       	ldd	r19, Y+8	; 0x08
 2c2:	49 2d       	mov	r20, r9
 2c4:	58 2d       	mov	r21, r8
 2c6:	67 2d       	mov	r22, r7
 2c8:	76 2d       	mov	r23, r6
 2ca:	85 2d       	mov	r24, r5
 2cc:	94 2d       	mov	r25, r4
 2ce:	0e 94 26 03 	call	0x64c	; 0x64c <__umoddi3>
 2d2:	80 e3       	ldi	r24, 0x30	; 48
 2d4:	82 0f       	add	r24, r18
 2d6:	0e 94 5a 00 	call	0xb4	; 0xb4 <CLCD_voidSendData>
 2da:	2f 81       	ldd	r18, Y+7	; 0x07
 2dc:	38 85       	ldd	r19, Y+8	; 0x08
 2de:	49 2d       	mov	r20, r9
 2e0:	58 2d       	mov	r21, r8
 2e2:	67 2d       	mov	r22, r7
 2e4:	76 2d       	mov	r23, r6
 2e6:	85 2d       	mov	r24, r5
 2e8:	94 2d       	mov	r25, r4
 2ea:	0e 94 28 03 	call	0x650	; 0x650 <__udivdi3>
 2ee:	2f 83       	std	Y+7, r18	; 0x07
 2f0:	38 87       	std	Y+8, r19	; 0x08
 2f2:	94 2e       	mov	r9, r20
 2f4:	85 2e       	mov	r8, r21
 2f6:	76 2e       	mov	r7, r22
 2f8:	67 2e       	mov	r6, r23
 2fa:	58 2e       	mov	r5, r24
 2fc:	49 2e       	mov	r4, r25
 2fe:	2f 81       	ldd	r18, Y+7	; 0x07
 300:	38 85       	ldd	r19, Y+8	; 0x08
 302:	49 2d       	mov	r20, r9
 304:	58 2d       	mov	r21, r8
 306:	67 2d       	mov	r22, r7
 308:	76 2d       	mov	r23, r6
 30a:	85 2d       	mov	r24, r5
 30c:	94 2d       	mov	r25, r4
 30e:	a1 e0       	ldi	r26, 0x01	; 1
 310:	0e 94 a7 03 	call	0x74e	; 0x74e <__cmpdi2_s8>
 314:	49 f6       	brne	.-110    	; 0x2a8 <CLCD_voidSendNumber+0x17e>
 316:	28 96       	adiw	r28, 0x08	; 8
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	f8 94       	cli
 31c:	de bf       	out	0x3e, r29	; 62
 31e:	0f be       	out	0x3f, r0	; 63
 320:	cd bf       	out	0x3d, r28	; 61
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	1f 91       	pop	r17
 328:	0f 91       	pop	r16
 32a:	ff 90       	pop	r15
 32c:	ef 90       	pop	r14
 32e:	df 90       	pop	r13
 330:	cf 90       	pop	r12
 332:	bf 90       	pop	r11
 334:	af 90       	pop	r10
 336:	9f 90       	pop	r9
 338:	8f 90       	pop	r8
 33a:	7f 90       	pop	r7
 33c:	6f 90       	pop	r6
 33e:	5f 90       	pop	r5
 340:	4f 90       	pop	r4
 342:	3f 90       	pop	r3
 344:	2f 90       	pop	r2
 346:	08 95       	ret

00000348 <CLCD_voidClearScreen>:
* Parameters : nothing
* return : nothing
*/
void CLCD_voidClearScreen(void)
{
	CLCD_voidSendCommand(lcd_Clear);
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	0e 94 6e 00 	call	0xdc	; 0xdc <CLCD_voidSendCommand>
	CLCD_voidSendCommand(lcd_Home);
 34e:	82 e0       	ldi	r24, 0x02	; 2
 350:	0e 94 6e 00 	call	0xdc	; 0xdc <CLCD_voidSendCommand>
 354:	8f e9       	ldi	r24, 0x9F	; 159
 356:	9f e0       	ldi	r25, 0x0F	; 15
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <CLCD_voidClearScreen+0x10>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <CLCD_voidClearScreen+0x16>
 35e:	00 00       	nop
 360:	08 95       	ret

00000362 <CLCD_voidInit>:
 362:	2f eb       	ldi	r18, 0xBF	; 191
 364:	8a ed       	ldi	r24, 0xDA	; 218
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	21 50       	subi	r18, 0x01	; 1
 36a:	80 40       	sbci	r24, 0x00	; 0
 36c:	90 40       	sbci	r25, 0x00	; 0
 36e:	e1 f7       	brne	.-8      	; 0x368 <CLCD_voidInit+0x6>
 370:	00 c0       	rjmp	.+0      	; 0x372 <CLCD_voidInit+0x10>
 372:	00 00       	nop
	DIO_PIN_init ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PORT_OUTPUT  );
	DIO_PIN_init ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PORT_OUTPUT  );
	DIO_PIN_init ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PORT_OUTPUT  );
*/
	/* Return cursor to the first position on the first line  */
	CLCD_voidSendCommand(lcd_Home);
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	0e 94 6e 00 	call	0xdc	; 0xdc <CLCD_voidSendCommand>
 37a:	8f ec       	ldi	r24, 0xCF	; 207
 37c:	97 e0       	ldi	r25, 0x07	; 7
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <CLCD_voidInit+0x1c>
 382:	00 c0       	rjmp	.+0      	; 0x384 <CLCD_voidInit+0x22>
 384:	00 00       	nop
	_delay_ms(1);

	/*FUNCTION SET Command : 2 lines , 5*8 font size */
	CLCD_voidSendCommand( EIGHT_BITS ); // 8 Bit Mode ==> 0x38
 386:	88 e3       	ldi	r24, 0x38	; 56
 388:	0e 94 6e 00 	call	0xdc	; 0xdc <CLCD_voidSendCommand>
 38c:	8f ec       	ldi	r24, 0xCF	; 207
 38e:	97 e0       	ldi	r25, 0x07	; 7
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <CLCD_voidInit+0x2e>
 394:	00 c0       	rjmp	.+0      	; 0x396 <CLCD_voidInit+0x34>
 396:	00 00       	nop
	_delay_ms(1); // wait more than 39 Ms

	/* DISPLAY & Cursor (ON / OFF) Control */
	CLCD_voidSendCommand( Cursor_Mode );
 398:	8c e0       	ldi	r24, 0x0C	; 12
 39a:	0e 94 6e 00 	call	0xdc	; 0xdc <CLCD_voidSendCommand>
 39e:	8f ec       	ldi	r24, 0xCF	; 207
 3a0:	97 e0       	ldi	r25, 0x07	; 7
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <CLCD_voidInit+0x40>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <CLCD_voidInit+0x46>
 3a8:	00 00       	nop
	_delay_ms(1);

	/* DISPLAY CLEAR */
	CLCD_voidClearScreen();
 3aa:	0e 94 a4 01 	call	0x348	; 0x348 <CLCD_voidClearScreen>

	/* ENTRY MODE  SET*/
	CLCD_voidSendCommand( lcd_EntryMode );
 3ae:	86 e0       	ldi	r24, 0x06	; 6
 3b0:	0e 94 6e 00 	call	0xdc	; 0xdc <CLCD_voidSendCommand>
 3b4:	8f ec       	ldi	r24, 0xCF	; 207
 3b6:	97 e0       	ldi	r25, 0x07	; 7
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <CLCD_voidInit+0x56>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <CLCD_voidInit+0x5c>
 3be:	00 00       	nop
 3c0:	08 95       	ret

000003c2 <main>:
#include "MCAL/ADC Driver/ADC_Interface.h"
#include "MCAL/PORT Driver/PORT_interface.h"
#include "MCAL/DIO Driver/DIO_Interface.h"
#include "HAL/LCD Driver/CLCD_interface.h"
int main(void)
{
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	00 d0       	rcall	.+0      	; 0x3c8 <main+0x6>
 3c8:	00 d0       	rcall	.+0      	; 0x3ca <main+0x8>
 3ca:	1f 92       	push	r1
 3cc:	cd b7       	in	r28, 0x3d	; 61
 3ce:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	PORT_voidInit();
 3d0:	0e 94 c0 02 	call	0x580	; 0x580 <PORT_voidInit>
	ADC_VoidInit();
 3d4:	0e 94 2b 02 	call	0x456	; 0x456 <ADC_VoidInit>
	CLCD_voidInit();
 3d8:	0e 94 b1 01 	call	0x362	; 0x362 <CLCD_voidInit>
	u16 result,past_result;u64 Answer;
	u8 ML_Volt[]="mv";
 3dc:	8d e6       	ldi	r24, 0x6D	; 109
 3de:	96 e7       	ldi	r25, 0x76	; 118
 3e0:	9c 83       	std	Y+4, r25	; 0x04
 3e2:	8b 83       	std	Y+3, r24	; 0x03
 3e4:	1d 82       	std	Y+5, r1	; 0x05
    while (1) 
    {
		ADC_u16ReadASynchronus(ADC_CHANNEL0, &result);
 3e6:	be 01       	movw	r22, r28
 3e8:	6f 5f       	subi	r22, 0xFF	; 255
 3ea:	7f 4f       	sbci	r23, 0xFF	; 255
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	0e 94 49 02 	call	0x492	; 0x492 <ADC_u16ReadASynchronus>
		if(past_result!=result){
 3f2:	89 81       	ldd	r24, Y+1	; 0x01
 3f4:	9a 81       	ldd	r25, Y+2	; 0x02
 3f6:	08 17       	cp	r16, r24
 3f8:	19 07       	cpc	r17, r25
 3fa:	a9 f3       	breq	.-22     	; 0x3e6 <main+0x24>
			CLCD_voidClearScreen();
 3fc:	0e 94 a4 01 	call	0x348	; 0x348 <CLCD_voidClearScreen>
			Answer=( (u64)((u64)result*5000)/1023);
 400:	49 81       	ldd	r20, Y+1	; 0x01
 402:	5a 81       	ldd	r21, Y+2	; 0x02
 404:	0f 2e       	mov	r0, r31
 406:	f8 e8       	ldi	r31, 0x88	; 136
 408:	af 2e       	mov	r10, r31
 40a:	f0 2d       	mov	r31, r0
 40c:	0f 2e       	mov	r0, r31
 40e:	f3 e1       	ldi	r31, 0x13	; 19
 410:	bf 2e       	mov	r11, r31
 412:	f0 2d       	mov	r31, r0
 414:	c1 2c       	mov	r12, r1
 416:	d1 2c       	mov	r13, r1
 418:	e1 2c       	mov	r14, r1
 41a:	f1 2c       	mov	r15, r1
 41c:	00 e0       	ldi	r16, 0x00	; 0
 41e:	10 e0       	ldi	r17, 0x00	; 0
 420:	24 2f       	mov	r18, r20
 422:	35 2f       	mov	r19, r21
 424:	40 e0       	ldi	r20, 0x00	; 0
 426:	50 e0       	ldi	r21, 0x00	; 0
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	70 e0       	ldi	r23, 0x00	; 0
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 cd 02 	call	0x59a	; 0x59a <__muldi3>
 434:	aa 24       	eor	r10, r10
 436:	aa 94       	dec	r10
 438:	0f 2e       	mov	r0, r31
 43a:	f3 e0       	ldi	r31, 0x03	; 3
 43c:	bf 2e       	mov	r11, r31
 43e:	f0 2d       	mov	r31, r0
 440:	0e 94 28 03 	call	0x650	; 0x650 <__udivdi3>
			CLCD_voidSendNumber((u64)Answer);
 444:	0e 94 95 00 	call	0x12a	; 0x12a <CLCD_voidSendNumber>
			CLCD_voidSendString(ML_Volt);
 448:	ce 01       	movw	r24, r28
 44a:	03 96       	adiw	r24, 0x03	; 3
 44c:	0e 94 82 00 	call	0x104	; 0x104 <CLCD_voidSendString>
			past_result=result;
 450:	09 81       	ldd	r16, Y+1	; 0x01
 452:	1a 81       	ldd	r17, Y+2	; 0x02
 454:	c8 cf       	rjmp	.-112    	; 0x3e6 <main+0x24>

00000456 <ADC_VoidInit>:
		}
	}
}
void ADC_VoidSet_prescaler(u8 prescaler){
	ADCSRA &= ADC_PRE_MASK ;
	ADCSRA |= prescaler ;
 456:	87 b1       	in	r24, 0x07	; 7
 458:	8f 7d       	andi	r24, 0xDF	; 223
 45a:	87 b9       	out	0x07, r24	; 7
 45c:	87 b1       	in	r24, 0x07	; 7
 45e:	80 64       	ori	r24, 0x40	; 64
 460:	87 b9       	out	0x07, r24	; 7
 462:	87 b1       	in	r24, 0x07	; 7
 464:	8f 77       	andi	r24, 0x7F	; 127
 466:	87 b9       	out	0x07, r24	; 7
 468:	87 b1       	in	r24, 0x07	; 7
 46a:	80 7e       	andi	r24, 0xE0	; 224
 46c:	87 b9       	out	0x07, r24	; 7
 46e:	87 b1       	in	r24, 0x07	; 7
 470:	87 b9       	out	0x07, r24	; 7
 472:	86 b1       	in	r24, 0x06	; 6
 474:	8f 7d       	andi	r24, 0xDF	; 223
 476:	86 b9       	out	0x06, r24	; 6
 478:	86 b1       	in	r24, 0x06	; 6
 47a:	88 7f       	andi	r24, 0xF8	; 248
 47c:	86 b9       	out	0x06, r24	; 6
 47e:	86 b1       	in	r24, 0x06	; 6
 480:	85 60       	ori	r24, 0x05	; 5
 482:	86 b9       	out	0x06, r24	; 6
 484:	86 b1       	in	r24, 0x06	; 6
 486:	80 68       	ori	r24, 0x80	; 128
 488:	86 b9       	out	0x06, r24	; 6
 48a:	86 b1       	in	r24, 0x06	; 6
 48c:	88 60       	ori	r24, 0x08	; 8
 48e:	86 b9       	out	0x06, r24	; 6
 490:	08 95       	ret

00000492 <ADC_u16ReadASynchronus>:
 492:	96 b1       	in	r25, 0x06	; 6
 494:	96 fb       	bst	r25, 6
 496:	22 27       	eor	r18, r18
 498:	20 f9       	bld	r18, 0
 49a:	96 ff       	sbrs	r25, 6
 49c:	04 c0       	rjmp	.+8      	; 0x4a6 <ADC_u16ReadASynchronus+0x14>
 49e:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <Channelreaded>
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	35 c0       	rjmp	.+106    	; 0x510 <ADC_u16ReadASynchronus+0x7e>
 4a6:	21 11       	cpse	r18, r1
 4a8:	32 c0       	rjmp	.+100    	; 0x50e <ADC_u16ReadASynchronus+0x7c>
 4aa:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <currunetChannel>
 4ae:	98 13       	cpse	r25, r24
 4b0:	12 c0       	rjmp	.+36     	; 0x4d6 <ADC_u16ReadASynchronus+0x44>
 4b2:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <Channelreaded>
 4b6:	21 11       	cpse	r18, r1
 4b8:	0e c0       	rjmp	.+28     	; 0x4d6 <ADC_u16ReadASynchronus+0x44>
 4ba:	24 b1       	in	r18, 0x04	; 4
 4bc:	85 b1       	in	r24, 0x05	; 5
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	98 2f       	mov	r25, r24
 4c2:	88 27       	eor	r24, r24
 4c4:	82 2b       	or	r24, r18
 4c6:	fb 01       	movw	r30, r22
 4c8:	91 83       	std	Z+1, r25	; 0x01
 4ca:	80 83       	st	Z, r24
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Channelreaded>
 4d2:	91 e0       	ldi	r25, 0x01	; 1
 4d4:	1d c0       	rjmp	.+58     	; 0x510 <ADC_u16ReadASynchronus+0x7e>
 4d6:	98 13       	cpse	r25, r24
 4d8:	0b c0       	rjmp	.+22     	; 0x4f0 <ADC_u16ReadASynchronus+0x5e>
 4da:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <Channelreaded>
 4de:	91 30       	cpi	r25, 0x01	; 1
 4e0:	39 f4       	brne	.+14     	; 0x4f0 <ADC_u16ReadASynchronus+0x5e>
 4e2:	86 b1       	in	r24, 0x06	; 6
 4e4:	80 64       	ori	r24, 0x40	; 64
 4e6:	86 b9       	out	0x06, r24	; 6
 4e8:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <Channelreaded>
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	10 c0       	rjmp	.+32     	; 0x510 <ADC_u16ReadASynchronus+0x7e>
 4f0:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <Channelreaded>
 4f4:	99 23       	and	r25, r25
 4f6:	61 f0       	breq	.+24     	; 0x510 <ADC_u16ReadASynchronus+0x7e>
 4f8:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <currunetChannel>
 4fc:	88 30       	cpi	r24, 0x08	; 8
 4fe:	20 f4       	brcc	.+8      	; 0x508 <ADC_u16ReadASynchronus+0x76>
 500:	97 b1       	in	r25, 0x07	; 7
 502:	90 7e       	andi	r25, 0xE0	; 224
 504:	89 2b       	or	r24, r25
 506:	87 b9       	out	0x07, r24	; 7
 508:	86 b1       	in	r24, 0x06	; 6
 50a:	80 64       	ori	r24, 0x40	; 64
 50c:	86 b9       	out	0x06, r24	; 6
 50e:	08 95       	ret
 510:	89 2f       	mov	r24, r25
 512:	08 95       	ret

00000514 <__vector_16>:
}
void __vector_16 (void)   __attribute__((signal));
void __vector_16 (void)
{
 514:	1f 92       	push	r1
 516:	0f 92       	push	r0
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	0f 92       	push	r0
 51c:	11 24       	eor	r1, r1

}
 51e:	0f 90       	pop	r0
 520:	0f be       	out	0x3f, r0	; 63
 522:	0f 90       	pop	r0
 524:	1f 90       	pop	r1
 526:	18 95       	reti

00000528 <DIO_PIN_write>:
}

void DIO_PIN_write(  GPIO_PORT* portname ,u8 pinnumber , u8 value ){
	

		if (value==DIO_PIN_HIGH)
 528:	41 30       	cpi	r20, 0x01	; 1
 52a:	81 f4       	brne	.+32     	; 0x54c <DIO_PIN_write+0x24>
		{
			SET_BIT(*(portname->PORT),pinnumber);
 52c:	dc 01       	movw	r26, r24
 52e:	12 96       	adiw	r26, 0x02	; 2
 530:	ed 91       	ld	r30, X+
 532:	fc 91       	ld	r31, X
 534:	13 97       	sbiw	r26, 0x03	; 3
 536:	20 81       	ld	r18, Z
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_PIN_write+0x1a>
 53e:	88 0f       	add	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	6a 95       	dec	r22
 544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_PIN_write+0x16>
 546:	82 2b       	or	r24, r18
 548:	80 83       	st	Z, r24
 54a:	08 95       	ret
			
		}
		else if (value==DIO_PIN_LOW)
 54c:	41 11       	cpse	r20, r1
 54e:	10 c0       	rjmp	.+32     	; 0x570 <DIO_PIN_write+0x48>
		{
			CLEAR_BIT(*(portname->PORT),pinnumber);
 550:	dc 01       	movw	r26, r24
 552:	12 96       	adiw	r26, 0x02	; 2
 554:	ed 91       	ld	r30, X+
 556:	fc 91       	ld	r31, X
 558:	13 97       	sbiw	r26, 0x03	; 3
 55a:	20 81       	ld	r18, Z
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	02 c0       	rjmp	.+4      	; 0x566 <DIO_PIN_write+0x3e>
 562:	88 0f       	add	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	6a 95       	dec	r22
 568:	e2 f7       	brpl	.-8      	; 0x562 <DIO_PIN_write+0x3a>
 56a:	80 95       	com	r24
 56c:	82 23       	and	r24, r18
 56e:	80 83       	st	Z, r24
 570:	08 95       	ret

00000572 <DIO_PORT_write>:
		}
		
	
}
void DIO_PORT_write(  GPIO_PORT* portname , u8 value ){
			WRITE_REG(*(portname->PORT),value);		
 572:	dc 01       	movw	r26, r24
 574:	12 96       	adiw	r26, 0x02	; 2
 576:	ed 91       	ld	r30, X+
 578:	fc 91       	ld	r31, X
 57a:	13 97       	sbiw	r26, 0x03	; 3
 57c:	60 83       	st	Z, r22
 57e:	08 95       	ret

00000580 <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_interface.h"

void PORT_voidInit(void)
{
	DDRA_Register=PORTA_DIR;
 580:	9e ef       	ldi	r25, 0xFE	; 254
 582:	9a bb       	out	0x1a, r25	; 26
	DDRB_Register=PORTB_DIR;
 584:	83 e0       	ldi	r24, 0x03	; 3
 586:	87 bb       	out	0x17, r24	; 23
	DDRC_Register=PORTC_DIR;
 588:	27 e0       	ldi	r18, 0x07	; 7
 58a:	24 bb       	out	0x14, r18	; 20
	DDRD_Register=PORTD_DIR;
 58c:	2f ef       	ldi	r18, 0xFF	; 255
 58e:	21 bb       	out	0x11, r18	; 17
	
	/* 
		Hint : will set 1 if The pin input Pullup
	*/
	PORTA_Register=PORTA_INITIAL_VALUE;
 590:	9b bb       	out	0x1b, r25	; 27
	PORTB_Register=PORTB_INITIAL_VALUE;
 592:	88 bb       	out	0x18, r24	; 24
	PORTC_Register=PORTC_INITIAL_VALUE;
 594:	15 ba       	out	0x15, r1	; 21
	PORTD_Register=PORTD_INITIAL_VALUE;
 596:	12 ba       	out	0x12, r1	; 18
 598:	08 95       	ret

0000059a <__muldi3>:
 59a:	df 93       	push	r29
 59c:	cf 93       	push	r28
 59e:	1f 93       	push	r17
 5a0:	0f 93       	push	r16
 5a2:	9a 9d       	mul	r25, r10
 5a4:	f0 2d       	mov	r31, r0
 5a6:	21 9f       	mul	r18, r17
 5a8:	f0 0d       	add	r31, r0
 5aa:	8b 9d       	mul	r24, r11
 5ac:	f0 0d       	add	r31, r0
 5ae:	8a 9d       	mul	r24, r10
 5b0:	e0 2d       	mov	r30, r0
 5b2:	f1 0d       	add	r31, r1
 5b4:	03 9f       	mul	r16, r19
 5b6:	f0 0d       	add	r31, r0
 5b8:	02 9f       	mul	r16, r18
 5ba:	e0 0d       	add	r30, r0
 5bc:	f1 1d       	adc	r31, r1
 5be:	4e 9d       	mul	r20, r14
 5c0:	e0 0d       	add	r30, r0
 5c2:	f1 1d       	adc	r31, r1
 5c4:	5e 9d       	mul	r21, r14
 5c6:	f0 0d       	add	r31, r0
 5c8:	4f 9d       	mul	r20, r15
 5ca:	f0 0d       	add	r31, r0
 5cc:	7f 93       	push	r23
 5ce:	6f 93       	push	r22
 5d0:	bf 92       	push	r11
 5d2:	af 92       	push	r10
 5d4:	5f 93       	push	r21
 5d6:	4f 93       	push	r20
 5d8:	d5 01       	movw	r26, r10
 5da:	0e 94 b3 03 	call	0x766	; 0x766 <__umulhisi3>
 5de:	8b 01       	movw	r16, r22
 5e0:	ac 01       	movw	r20, r24
 5e2:	d7 01       	movw	r26, r14
 5e4:	0e 94 b3 03 	call	0x766	; 0x766 <__umulhisi3>
 5e8:	eb 01       	movw	r28, r22
 5ea:	e8 0f       	add	r30, r24
 5ec:	f9 1f       	adc	r31, r25
 5ee:	d6 01       	movw	r26, r12
 5f0:	0e 94 1d 03 	call	0x63a	; 0x63a <__muldi3_6>
 5f4:	2f 91       	pop	r18
 5f6:	3f 91       	pop	r19
 5f8:	d6 01       	movw	r26, r12
 5fa:	0e 94 b3 03 	call	0x766	; 0x766 <__umulhisi3>
 5fe:	c6 0f       	add	r28, r22
 600:	d7 1f       	adc	r29, r23
 602:	e8 1f       	adc	r30, r24
 604:	f9 1f       	adc	r31, r25
 606:	af 91       	pop	r26
 608:	bf 91       	pop	r27
 60a:	0e 94 1d 03 	call	0x63a	; 0x63a <__muldi3_6>
 60e:	2f 91       	pop	r18
 610:	3f 91       	pop	r19
 612:	0e 94 b3 03 	call	0x766	; 0x766 <__umulhisi3>
 616:	c6 0f       	add	r28, r22
 618:	d7 1f       	adc	r29, r23
 61a:	e8 1f       	adc	r30, r24
 61c:	f9 1f       	adc	r31, r25
 61e:	d6 01       	movw	r26, r12
 620:	0e 94 b3 03 	call	0x766	; 0x766 <__umulhisi3>
 624:	e6 0f       	add	r30, r22
 626:	f7 1f       	adc	r31, r23
 628:	98 01       	movw	r18, r16
 62a:	be 01       	movw	r22, r28
 62c:	cf 01       	movw	r24, r30
 62e:	11 24       	eor	r1, r1
 630:	0f 91       	pop	r16
 632:	1f 91       	pop	r17
 634:	cf 91       	pop	r28
 636:	df 91       	pop	r29
 638:	08 95       	ret

0000063a <__muldi3_6>:
 63a:	0e 94 b3 03 	call	0x766	; 0x766 <__umulhisi3>
 63e:	46 0f       	add	r20, r22
 640:	57 1f       	adc	r21, r23
 642:	c8 1f       	adc	r28, r24
 644:	d9 1f       	adc	r29, r25
 646:	08 f4       	brcc	.+2      	; 0x64a <__muldi3_6+0x10>
 648:	31 96       	adiw	r30, 0x01	; 1
 64a:	08 95       	ret

0000064c <__umoddi3>:
 64c:	68 94       	set
 64e:	01 c0       	rjmp	.+2      	; 0x652 <__udivdi3_umoddi3>

00000650 <__udivdi3>:
 650:	e8 94       	clt

00000652 <__udivdi3_umoddi3>:
 652:	8f 92       	push	r8
 654:	9f 92       	push	r9
 656:	cf 93       	push	r28
 658:	df 93       	push	r29
 65a:	0e 94 34 03 	call	0x668	; 0x668 <__udivmod64>
 65e:	df 91       	pop	r29
 660:	cf 91       	pop	r28
 662:	9f 90       	pop	r9
 664:	8f 90       	pop	r8
 666:	08 95       	ret

00000668 <__udivmod64>:
 668:	88 24       	eor	r8, r8
 66a:	99 24       	eor	r9, r9
 66c:	f4 01       	movw	r30, r8
 66e:	e4 01       	movw	r28, r8
 670:	b0 e4       	ldi	r27, 0x40	; 64
 672:	9f 93       	push	r25
 674:	aa 27       	eor	r26, r26
 676:	9a 15       	cp	r25, r10
 678:	8b 04       	cpc	r8, r11
 67a:	9c 04       	cpc	r9, r12
 67c:	ed 05       	cpc	r30, r13
 67e:	fe 05       	cpc	r31, r14
 680:	cf 05       	cpc	r28, r15
 682:	d0 07       	cpc	r29, r16
 684:	a1 07       	cpc	r26, r17
 686:	98 f4       	brcc	.+38     	; 0x6ae <__udivmod64+0x46>
 688:	ad 2f       	mov	r26, r29
 68a:	dc 2f       	mov	r29, r28
 68c:	cf 2f       	mov	r28, r31
 68e:	fe 2f       	mov	r31, r30
 690:	e9 2d       	mov	r30, r9
 692:	98 2c       	mov	r9, r8
 694:	89 2e       	mov	r8, r25
 696:	98 2f       	mov	r25, r24
 698:	87 2f       	mov	r24, r23
 69a:	76 2f       	mov	r23, r22
 69c:	65 2f       	mov	r22, r21
 69e:	54 2f       	mov	r21, r20
 6a0:	43 2f       	mov	r20, r19
 6a2:	32 2f       	mov	r19, r18
 6a4:	22 27       	eor	r18, r18
 6a6:	b8 50       	subi	r27, 0x08	; 8
 6a8:	31 f7       	brne	.-52     	; 0x676 <__udivmod64+0xe>
 6aa:	bf 91       	pop	r27
 6ac:	27 c0       	rjmp	.+78     	; 0x6fc <__udivmod64+0x94>
 6ae:	1b 2e       	mov	r1, r27
 6b0:	bf 91       	pop	r27
 6b2:	bb 27       	eor	r27, r27
 6b4:	22 0f       	add	r18, r18
 6b6:	33 1f       	adc	r19, r19
 6b8:	44 1f       	adc	r20, r20
 6ba:	55 1f       	adc	r21, r21
 6bc:	66 1f       	adc	r22, r22
 6be:	77 1f       	adc	r23, r23
 6c0:	88 1f       	adc	r24, r24
 6c2:	99 1f       	adc	r25, r25
 6c4:	88 1c       	adc	r8, r8
 6c6:	99 1c       	adc	r9, r9
 6c8:	ee 1f       	adc	r30, r30
 6ca:	ff 1f       	adc	r31, r31
 6cc:	cc 1f       	adc	r28, r28
 6ce:	dd 1f       	adc	r29, r29
 6d0:	aa 1f       	adc	r26, r26
 6d2:	bb 1f       	adc	r27, r27
 6d4:	8a 14       	cp	r8, r10
 6d6:	9b 04       	cpc	r9, r11
 6d8:	ec 05       	cpc	r30, r12
 6da:	fd 05       	cpc	r31, r13
 6dc:	ce 05       	cpc	r28, r14
 6de:	df 05       	cpc	r29, r15
 6e0:	a0 07       	cpc	r26, r16
 6e2:	b1 07       	cpc	r27, r17
 6e4:	48 f0       	brcs	.+18     	; 0x6f8 <__udivmod64+0x90>
 6e6:	8a 18       	sub	r8, r10
 6e8:	9b 08       	sbc	r9, r11
 6ea:	ec 09       	sbc	r30, r12
 6ec:	fd 09       	sbc	r31, r13
 6ee:	ce 09       	sbc	r28, r14
 6f0:	df 09       	sbc	r29, r15
 6f2:	a0 0b       	sbc	r26, r16
 6f4:	b1 0b       	sbc	r27, r17
 6f6:	21 60       	ori	r18, 0x01	; 1
 6f8:	1a 94       	dec	r1
 6fa:	e1 f6       	brne	.-72     	; 0x6b4 <__udivmod64+0x4c>
 6fc:	2e f4       	brtc	.+10     	; 0x708 <__udivmod64+0xa0>
 6fe:	94 01       	movw	r18, r8
 700:	af 01       	movw	r20, r30
 702:	be 01       	movw	r22, r28
 704:	cd 01       	movw	r24, r26
 706:	00 0c       	add	r0, r0
 708:	08 95       	ret

0000070a <__ashldi3>:
 70a:	0f 93       	push	r16
 70c:	08 30       	cpi	r16, 0x08	; 8
 70e:	90 f0       	brcs	.+36     	; 0x734 <__ashldi3+0x2a>
 710:	98 2f       	mov	r25, r24
 712:	87 2f       	mov	r24, r23
 714:	76 2f       	mov	r23, r22
 716:	65 2f       	mov	r22, r21
 718:	54 2f       	mov	r21, r20
 71a:	43 2f       	mov	r20, r19
 71c:	32 2f       	mov	r19, r18
 71e:	22 27       	eor	r18, r18
 720:	08 50       	subi	r16, 0x08	; 8
 722:	f4 cf       	rjmp	.-24     	; 0x70c <__ashldi3+0x2>
 724:	22 0f       	add	r18, r18
 726:	33 1f       	adc	r19, r19
 728:	44 1f       	adc	r20, r20
 72a:	55 1f       	adc	r21, r21
 72c:	66 1f       	adc	r22, r22
 72e:	77 1f       	adc	r23, r23
 730:	88 1f       	adc	r24, r24
 732:	99 1f       	adc	r25, r25
 734:	0a 95       	dec	r16
 736:	b2 f7       	brpl	.-20     	; 0x724 <__ashldi3+0x1a>
 738:	0f 91       	pop	r16
 73a:	08 95       	ret

0000073c <__adddi3>:
 73c:	2a 0d       	add	r18, r10
 73e:	3b 1d       	adc	r19, r11
 740:	4c 1d       	adc	r20, r12
 742:	5d 1d       	adc	r21, r13
 744:	6e 1d       	adc	r22, r14
 746:	7f 1d       	adc	r23, r15
 748:	80 1f       	adc	r24, r16
 74a:	91 1f       	adc	r25, r17
 74c:	08 95       	ret

0000074e <__cmpdi2_s8>:
 74e:	00 24       	eor	r0, r0
 750:	a7 fd       	sbrc	r26, 7
 752:	00 94       	com	r0
 754:	2a 17       	cp	r18, r26
 756:	30 05       	cpc	r19, r0
 758:	40 05       	cpc	r20, r0
 75a:	50 05       	cpc	r21, r0
 75c:	60 05       	cpc	r22, r0
 75e:	70 05       	cpc	r23, r0
 760:	80 05       	cpc	r24, r0
 762:	90 05       	cpc	r25, r0
 764:	08 95       	ret

00000766 <__umulhisi3>:
 766:	a2 9f       	mul	r26, r18
 768:	b0 01       	movw	r22, r0
 76a:	b3 9f       	mul	r27, r19
 76c:	c0 01       	movw	r24, r0
 76e:	a3 9f       	mul	r26, r19
 770:	70 0d       	add	r23, r0
 772:	81 1d       	adc	r24, r1
 774:	11 24       	eor	r1, r1
 776:	91 1d       	adc	r25, r1
 778:	b2 9f       	mul	r27, r18
 77a:	70 0d       	add	r23, r0
 77c:	81 1d       	adc	r24, r1
 77e:	11 24       	eor	r1, r1
 780:	91 1d       	adc	r25, r1
 782:	08 95       	ret

00000784 <_exit>:
 784:	f8 94       	cli

00000786 <__stop_program>:
 786:	ff cf       	rjmp	.-2      	; 0x786 <__stop_program>
